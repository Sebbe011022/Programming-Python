{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "1fc096ba",
   "metadata": {},
   "outputs": [],
   "source": [
    "def user_input_pokemon_data(nearest_points):\n",
    "    # Creating empty list to store distances and labels as tuples\n",
    "    pokemon_list = [] \n",
    "    # Creating loop that gives user choice to input the data\n",
    "    while True:\n",
    "        print(\"Wanna find out which of the pokemon you got?\")\n",
    "        user_choice  = input(\"input -> y <- for yes \")\n",
    "        #Creating try, except ValueError to handle the wrong input\n",
    "        try: \n",
    "            if user_choice == \"y\":\n",
    "                # Asks user to input width and height and gives error if its other input then positiv numbers\n",
    "                user_width = float(input(\"What is your pokemons testpoints, start with width? \"))\n",
    "                if user_width <= 0:\n",
    "                    raise ValueError(\"Width has to be positiv number\")\n",
    "                user_height = float(input(\"What is your pokemons testpoints, start with height? \"))\n",
    "                if user_height <= 0:\n",
    "                    raise ValueError(\"Height has to be positiv number\")\n",
    "                #Looping through to stored list of pokemon data in goal to calculate distances which each width and height data and store the calculated distances with each label as tuple\n",
    "                for step in range(len(widths)):\n",
    "                    input_distance = euclidean_distance(user_width, widths[step],  user_height, heights[step])\n",
    "                    pokemon_list.append((input_distance, labels[step]))\n",
    "\n",
    "            # Loop Broken because of the other input than y\n",
    "            else: \n",
    "                print(\"Your not a pokemon fan, Good Bye!\")\n",
    "            break \n",
    "            \n",
    "        except ValueError as err:\n",
    "                # Catch and show errors related to wrong input\n",
    "                print(f\"Input error: {err}. Please enter positiv numbers\")    \n",
    "    \n",
    "\n",
    "    sorted_list = sorted(pokemon_list)\n",
    "    slice_list = sorted_list[:nearest_points]\n",
    "\n",
    "    pichu_label_list = []\n",
    "    pikachu_label_list = []\n",
    "    pichu_distance_list = []\n",
    "    pikachu_distance_list = []\n",
    "\n",
    "    \n",
    "    for slice in slice_list:\n",
    "        print(f\"{slice[0]}, {slice[1]}\")\n",
    "    \n",
    "        if slice[1] == 0:\n",
    "            pichu_label_list.append(slice[1])\n",
    "            pichu_distance_list.append(slice[0])\n",
    "        else:\n",
    "            pikachu_label_list.append(slice[1])\n",
    "            pikachu_distance_list.append(slice[0])\n",
    "            \n",
    "            \n",
    "            \n",
    "   \n",
    "        if len(pichu_label_list) > len(pikachu_label_list):\n",
    "            print(f\" The user input with (width, height, nearest point(s)): ({user_width}, {user_height}, {nearest_points}) classified as Pokemon - Pichu\")   \n",
    "        elif len(pichu_label_list) == len(pikachu_label_list):   \n",
    "            if sum(pichu_distance_list) > sum(pikachu_distance_list):\n",
    "                print(f\" The user input with (width, height, nearest point(s)): ({user_width}, {user_height}, {nearest_points}) classified as Pokemon - Pichu\")   \n",
    "            else:\n",
    "                print(f\" The user input with (width, height, nearest point(s)): ({user_width}, {user_height}, {nearest_points}) classified as Pokemon - Pichu\")   \n",
    "        else:\n",
    "            print(f\" The user input with (width, height, nearest point(s)): ({user_width}, {user_height}, {nearest_points}) classified as Pokemon - Pikachu\")   \n",
    "        \n",
    "while True:\n",
    "    try:\n",
    "        nearest_point = int(input(\"User how many nearest point(s) do you wanna use? \"))\n",
    "        if nearest_point > 0:\n",
    "            user_input_pokemon_data(nearest_point)\n",
    "            break\n",
    "        else:\n",
    "            raise ValueError(\"You have to input positive integer\")\n",
    "    except ValueError as err:\n",
    "            print(f\"Input error: {err}. Please enter positiv integer\")    \n"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.12.6"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
